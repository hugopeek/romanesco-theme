/*******************************
         Theme Overrides
*******************************/

.ui.nested.grid {
    // Only in the Content sections
    #main &:not(:last-child) {
        margin-bottom: @verticalRhythm2;
    }
    // Add top margin for all nested grids that follow another element
    #main * + & {
        margin-top: @verticalRhythm2;
    }
    // Remove top margin for celled grids
    &.celled {
        margin-top: 0;
        border-radius: @roundedBorderRadius;
        overflow: hidden;
    }
}

.ui.overview.grid {
    // Separate relaxed columns more clearly
    &.relaxed > .column {
        margin-bottom: @verticalRhythm2;
    }
    &[class*="very relaxed"] > .column {
        margin-bottom: @verticalRhythm3;
    }

    .column.publication {
        // Place header closer to top image
        figure + .ui.header {
            margin-top: @verticalRhythm1;
        }

        // Meta content is missing out on subtitle margins
        .ui.header + .meta {
            margin-top: -1rem;
            margin-bottom: 1rem;
        }

        // Button margin is a little off
        p + a.ui.button {
            margin-top: .5em;
        }
    }
}

// Additional styles for wireframes inside the front-end pattern library
.ui.wireframe.grid {
    > .column:not(:last-child),
    .nested.grid {
        margin-bottom: -1rem !important;
    }
    .nested.grid > .column:not(:last-child) {
        margin-right: -1rem;
    }
    .segment {
        box-shadow: none;
        border-radius: 0;
    }
}

// Additional styles for kanban grid
.ui.kanban.grid {
    margin-top: 0;

    .priority.column {
        background: @subtleTransparentBlack;
        padding-top: .5em;
        padding-bottom: .5em;
    }
}

// Make sure column padding is correctly set on mobile
// This is probably a bug in Semantic UI, see:
// https://github.com/Semantic-Org/Semantic-UI/issues/5170
@media only screen and (max-width: @largestMobileScreen) {
    .ui.grid.container {
        > .column,
        > .row > .column {
            padding-left: 0 !important;
            padding-right: 0 !important;
        }
    }

    // Stackable columns are having issues inside nested containers
    .ui.container:not(.fluid) .container {
        > .ui.stackable.grid > .column,
        > .ui.stackable.grid > .row > .column {
            padding-left: 1rem !important;
            padding-right: 1rem !important;
        }
    }

    // Celled grids are also having issues
    .ui.container .ui.stackable.celled.grid,
    .ui.container .ui.stackable.celled.grid {
        margin-left: 0 !important;
        margin-right: 0 !important;

        > .column,
        > .row > .column {
            padding-left: 1rem !important;
            padding-right: 1rem !important;
        }
    }

    // And pagination wrappers, and nested stackable grids...
    .ui.container > .pagination-wrapper .ui.stackable.grid,
    .ui.container > .ui.stackable.grid .ui.stackable.grid {
        > .column,
        > .row > .column {
            padding-left: 0 !important;
            padding-right: 0 !important;
        }
    }
}

// Extend stackable behaviour to tablet breakpoint if desired
@media only screen and (min-width: @tabletBreakpoint) and (max-width: @largestTabletScreen) {
    .ui.stackable[class*="on tablet"].grid > .column,
    .ui.stackable[class*="on tablet"].grid > .row > .column {
        width: 100% !important;
        padding-top: @consecutiveGridDistance;
        padding-bottom: @consecutiveGridDistance;
    }
    .ui.stackable[class*="on tablet"].grid > .row {
        padding-top: 0;
        padding-bottom: 0;
    }
    .ui.stackable[class*="on tablet"].mobile.reversed.grid {
        flex-direction: column-reverse;
    }
}

// Add a compact column to equal width grids
// Compact columns only take up the width of their content
.ui.equal.width.grid .compact.column {
    flex-grow: 0;
    width: auto; // This overrides the percentage it gets by default
}

// Remove vertical padding from empty columns
#content .ui.grid .empty.column {
    padding-top: 0 !important;
    padding-bottom: 0 !important;
}

// The BasicVertical template requires a few overrides
body.vertical {
    #header {
        margin: 0;

        @media only screen and (max-width: @largestMobileScreen) {
            display: flex;
            width: 100%;
            height: @mainMenuTightenedHeight;
            padding: 0 (@gutterWidth / 2);
            transition: top 0.2s;

            // Top offset when header starts sticking
            &.fixed + main {
                margin-top: @mainMenuTightenedHeight;
            }

            // Use flexbox to center the menu
            #menu-vertical {
                flex: 1;
            }

            // Don't stick on mobile when scrolling down
            [data-scrolldir="down"] &.beam-me-up {
                top: -@mainMenuTightenedHeight;
            }
        }
        @media only screen and (min-width: @tabletBreakpoint) {
            position: fixed;
            width: 15rem;
            height: 100%;
            overflow: auto;
        }
        @media only screen and (min-width: @computerBreakpoint) {
            width: 20%;
        }
    }
    #main {
        // Use flexbox to stretch the main content area vertically
        display: flex;
        flex-direction: column;
        min-height: 100vh;

        #content {
            flex: 1;
        }
        #footer {
            flex: 0;
            padding-left: 1em;
            padding-right: 1em;
        }

        @media only screen and (min-width: @tabletBreakpoint) {
            margin-left: 15rem;
        }
        @media only screen and (min-width: @computerBreakpoint) {
            margin-left: 20%;
        }
    }
}