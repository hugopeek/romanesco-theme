/*******************************
        Global Overrides
*******************************/

// Global settings
//
// Use font size to set the base percentage for all em and rem units.
// The font-family and content values are used my onMediaQuery.js to target
//   Semantic UI breakpoints with JS.
//
// Added in 2020 are the root CSS variables. These are used to calculate
//   vertical rhythm values per breakpoint.
// ---------------------------------------------------------------------

html {
    font-size: 80%;
    font-family: "mobile";
    scroll-padding-top: @mainMenuHeight;
}
body:after {
    content: "mobile";
    display: none;
}

:root {
    --baseline: calc(@verticalRhythmBaseline * 0.3);
    --primary-color: @primaryColor;
    --primary-color-light: @lightPrimaryColor;
    --secondary-color: @secondaryColor;
    --secondary-color-light: @lightSecondaryColor;
}

@media screen and (min-width: @mobileBreakpoint) {
    html {
        font-size: 87.5%;
        font-family: "mobile";
    }
    body:after {
        content: "mobile";
    }

    :root {
        --baseline: calc(@verticalRhythmBaseline * 0.35);
    }
}

@media screen and (min-width: @tabletBreakpoint) {
    html {
        font-size: 90%;
        font-family: "tablet";
    }
    body:after {
        content: "tablet";
    }

    :root {
        --baseline: calc(@verticalRhythmBaseline * 0.55);
    }
}
@media screen and (min-width: @computerBreakpoint) {
    html {
        font-size: 85%;
        font-family: "computer";
    }
    body:after {
        content: "computer";
    }

    :root {
        --baseline: calc(@verticalRhythmBaseline * 0.6);
    }
}
@media screen and (min-width: @largeMonitorBreakpoint) {
    html {
        font-size: 90%;
        font-family: "large";
    }
    body:after {
        content: "large";
    }

    :root {
        --baseline: calc(@verticalRhythmBaseline * 0.7);
    }
}
@media screen and (min-width: @widescreenMonitorBreakpoint) {
    html {
        font-size: 95%;
        font-family: "widescreen";
    }
    body:after {
        content: "widescreen";
    }

    :root {
        --baseline: calc(@verticalRhythmBaseline * .9);
    }
}


// Global backgrounds
// ---------------------------------------------------------------------

// General classes to apply a background color directly to an element
// @todo: This should actually be primary-background for background colors, so primary-color can be used for text color.
.primary-color {
    background-color: @lightPrimaryColor !important;

    &.inverted {
        background-color: @primaryColor !important;
        color: @white !important;
    }
}
.secondary-color {
    background-color: @lightSecondaryColor !important;

    &.inverted {
        background-color: @secondaryColor !important;
        color: @white !important;
    }
}


// Hidden elements
// ---------------------------------------------------------------------

// Make 100% sure the element displays properly on request before applying
.hidden.element {
    display: none !important;
}


// Main content area
// ---------------------------------------------------------------------

// If there's no hero unit present, create some room for sticky navigation.
// Make sure to use padding on overview pages and margin on detail, to avoid
//  improper positioning of boxed segments and segment backgrounds.
#header.without.hero:not(.non-stick) {
    + #toolbar {
        padding-top: (@mainMenuHeight * 1.125);

        @media only screen and (max-width: @largestMobileScreen) {
            padding-top: @mainMenuHeight;
        }
    }

    // The following affects the adjacent main area only (so without toolbar in between)
    body:not(.detail) & + #main #content > .ui.stripe.segment:first-child {
        padding-top: (@mainMenuHeight * 1.618);

        @media only screen and (max-width: @largestMobileScreen) {
            padding-top: (@mainMenuHeight * 1.25);
        }
    }
    body.detail & {
        + #main #content,
        + #main #sidebar {
            margin-top: (@mainMenuHeight * 1.618);

            @media only screen and (max-width: @largestTabletScreen) {
                margin-top: @mainMenuHeight;
            }
        }
    }
}

// Detail page
body.detail {
    @media only screen and (max-width: @largestTabletScreen) {
        &.toc #content {
            margin-top: 0 !important;

            > .stripe.segment:first-child {
                padding-top: 0;
            }
        }

        // Sidebar is placed under the content
        #sidebar {
            background: @darkWhite;
            padding: @verticalRhythm5 0;
        }
    }
    @media only screen and (min-width: @computerBreakpoint) {
        #content,
        #sidebar {
            margin-top: @verticalRhythm5;
        }

        // Reduce padding of the first segment, if it's white
        &:not(.non-white) #content > .white.segment:first-child,
        &:not(.non-white) #sidebar > .white.segment:first-child {
            padding-top: 0;
        }
    }
}

// Pages with vertical header
body.vertical.toc {
    #content > .stripe.segment:first-child {
        padding-top: 0;
    }

    @media only screen and (min-width: @tabletBreakpoint) {
        #content,
        #sidebar {
            margin-top: @verticalRhythm2;
        }
    }
}


// Links
// ---------------------------------------------------------------------

p >,
li >,
.lead,
.content,
.header.inverted,
.header.sub {
    a:not(.button):not(.image):not(.item) {
        border-bottom: @linkBorderWidth @linkBorderStyle;
        &:hover {
            border-bottom: @linkBorderHoverWidth @linkBorderHoverStyle;
        }
    }
}
.header a:not(.inverted),
a.header:not(.inverted),
.menu:not(.tabular) a {
    border-bottom: none !important;
}

// Link styling inside inverted segments
a.inverted:not(.button):not(.boxed) {
    color: @invertedTextColor;
    border-bottom-color: fade(@white, 60);
    &:hover {
        border-bottom-color: @white;
    }
}

// Links to external content
#content a.external {
    &.label {
        position: relative;
        top: -.5rem;
    }
}


// Images & SVGs
// ---------------------------------------------------------------------

.image {
    // Isolate content images and offset from element below
    &.content + * {
        margin-top: @verticalRhythm3;
    }
}

// Fade in lazy loading images
img.lazy {
    opacity: 0;

    &:not(.initial) {
        transition: opacity 1s;
    }
    &.initial,
    &.loaded,
    &.error {
        opacity: 1;
    }
}

svg {
    fill: currentColor; // Takes the fill color of its container
}
svg.hidden {
    display: none; // This SVG is probably used as sprite
}


// Content elements
// ---------------------------------------------------------------------

p {
    margin: 0 0 @verticalRhythm2;
    font-weight: @normal;
}

.lead {
    font-size: @scaleRatio * 1em !important;
    line-height: (@lineHeight + 0.1) !important;

    // Reduce font size on mobile
    @media only screen and (max-width: @largestMobileScreen) {
        font-size: @scaleRatio * .8em !important;
    }
}
.lead,
.subtitle {
    color: @mutedTextColor;

    .inverted& {
        color: @invertedMutedTextColor;
    }
}

.meta,
.help,
.muted {
    color: @lightTextColor;

    .inverted & {
        color: @invertedLightTextColor;
    }
}
.meta {
    .publication & > span {
        display: inline-block;
        margin-right: 1em;
    }
}

.quote {
    width: max-content;
    max-width: 100%;

    // Basic variant and regular blockquotes
    &.basic,
    blockquote:not(&) {
        border-left: 5px solid;
        border-color: @borderColor;
        padding-left: 1em;
        color: @mutedTextColor;

        .inverted & {
            color: @invertedMutedTextColor;
            border-color: @whiteBorderColor;
        }
    }

    blockquote:not(&) {
        margin-bottom: @verticalRhythm2;
    }

    // With quotation marks before and after
    &:not(.basic) {
        position: relative;
        padding: 0 3% 0 5%;
        font-style: italic;

        &:before,
        &:after {
            position: absolute;
            z-index: 0;
            font-size: 4rem;
            font-weight: 600;
            line-height: 0;
            opacity: 0.2;
        }
        &:before {
            content: "\201C";
            top: 1rem;
            left: -1%;

        }
        &:after {
            content: "\201D";
            bottom: -0.5rem;
            right: -1%;
        }

        footer {
            color: @mutedTextColor;
            .inverted& {
                color: @invertedMutedTextColor;
            }
        }
    }

    // Fit in with surrounding elements
    * + &,
    + * {
        margin-top: @verticalRhythm3 !important;
    }

    // Sizing options
    p, & { font-size: @h3 !important; }
    footer { font-size: @scaleRatio * @fontSize; }

    &.mini {
        p, & { font-size: @h6 !important; }
        footer { font-size: @scaleRatio * @mini; }
    }
    &.tiny {
        p, & { font-size: @h5 !important; }
        footer { font-size: @scaleRatio * @tiny; }
    }
    &.small {
        p, & { font-size: @h4 !important; }
        footer { font-size: @scaleRatio * @small; }
    }
    &.large {
        p, & { font-size: @h2 !important; }
        footer { font-size: @scaleRatio * @large; }
    }
    &.big {
        p, & { font-size: @h1 !important; }
        footer { font-size: @scaleRatio * @big; }
    }
    &.huge {
        p, & { font-size: @h1 *  @scaleRatio !important; }
        footer { font-size: @scaleRatio * @huge; }
    }
    &.massive {
        p, & { font-size: @h1 *  @scaleRatio * @scaleRatio !important; }
        footer { font-size: @scaleRatio * @massive; }
    }

    // Reduce font size on mobile
    @media only screen and (max-width: @largestMobileScreen) {
        &.quote p, .quote& { font-size: @scaleRatio * @fontSize !important; }
        &.quote footer { font-size: @fontSize; }
    }
}

// Prism code blocks
#content code[class*="language-"],
#content pre[class*="language-"] {
    font-size: 1rem;
    border-radius: @roundedBorderRadius;
}
#content .code-toolbar {
    margin-bottom: @verticalRhythm2;
}

// Center content on request
.ui.stackable.center.when.stacked {
    @media only screen and (max-width: @largestMobileScreen) {
        text-align: center;
        .column {
            text-align: center;
        }
    }
    &.on.tablet {
        @media only screen and (max-width: @largestTabletScreen) {
            text-align: center;
            .column {
                text-align: center;
            }
        }
    }
}


// Footer
// ---------------------------------------------------------------------

#footer {
    p {
        font-size: 1rem;
    }

    .ui.list {
        &:not(.horizontal) .item {
            width: max-content;
            max-width: 100%;
        }
    }
}

#qredits {
    a.image {
        width: 2rem;
        cursor: pointer;
    }
    .ui.popup {
        width: 200px;

        p {
            margin-bottom: 1em;
        }
        a.button + a.button {
            margin-top: .5em;
        }
    }
}


// Overviews
// ---------------------------------------------------------------------

.overview {
    .description + p {
        margin-top: 2rem;
    }
}


// Map components
// ---------------------------------------------------------------------

.map {
    height: 70vh; // You'll probably want to override this value per map
}


// Responsive helper classes
// ---------------------------------------------------------------------

// For more info, see https://github.com/Semantic-Org/Semantic-UI/issues/1114

/* Mobile */
@media only screen and (max-width: (@tabletBreakpoint - 1)) {
    [class*="mobile hidden"],
    [class*="tablet only"]:not(.mobile),
    [class*="computer only"]:not(.mobile),
    [class*="large screen only"]:not(.mobile),
    [class*="widescreen only"]:not(.mobile),
    [class*="or lower hidden"] {
        display: none !important;
    }
}

/* Tablet / iPad Portrait */
@media only screen and (min-width: @tabletBreakpoint) and (max-width: (@computerBreakpoint - 1)) {
    [class*="mobile only"]:not(.tablet),
    [class*="tablet hidden"],
    [class*="computer only"]:not(.tablet),
    [class*="large screen only"]:not(.tablet),
    [class*="widescreen only"]:not(.tablet),
    [class*="or lower hidden"]:not(.mobile) {
        display: none !important;
    }
}

/* Computer / Desktop / iPad Landscape */
@media only screen and (min-width: @computerBreakpoint) and (max-width: (@largeMonitorBreakpoint - 1)) {
    [class*="mobile only"]:not(.computer),
    [class*="tablet only"]:not(.computer),
    [class*="computer hidden"],
    [class*="large screen only"]:not(.computer),
    [class*="widescreen only"]:not(.computer),
    [class*="or lower hidden"]:not(.tablet):not(.mobile) {
        display: none !important;
    }
}

/* Large Monitor */
@media only screen and (min-width: @largeMonitorBreakpoint) and (max-width: (@widescreenMonitorBreakpoint - 1)) {
    [class*="mobile only"]:not([class*="large screen"]),
    [class*="tablet only"]:not([class*="large screen"]),
    [class*="computer only"]:not([class*="large screen"]),
    [class*="large screen hidden"],
    [class*="widescreen only"]:not([class*="large screen"]),
    [class*="or lower hidden"]:not(.computer):not(.tablet):not(.mobile) {
        display: none !important;
    }
}

/* Widescreen Monitor */
@media only screen and (min-width: @widescreenMonitorBreakpoint) {
    [class*="mobile only"]:not([class*="widescreen"]),
    [class*="tablet only"]:not([class*="widescreen"]),
    [class*="computer only"]:not([class*="widescreen"]),
    [class*="large screen only"]:not([class*="widescreen"]),
    [class*="widescreen hidden"],
    [class*="widescreen or lower hidden"] {
        display: none !important;
    }
}
