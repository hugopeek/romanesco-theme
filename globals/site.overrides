/*******************************
        Global Overrides
*******************************/

// Global settings
//
// Use font size to set the base percentage for all em and rem units.
// The font-family and content values are used my onMediaQuery.js to target
//   Semantic UI breakpoints with JS.
//
// Added in 2020 are the root CSS variables. These are used to calculate
//   vertical rhythm values per breakpoint.
// ---------------------------------------------------------------------

html {
    font-size: 80%;
    font-family: "mobile";
}
body:after {
    content: "mobile";
    display: none;
}

:root {
    --baseline: @verticalRhythmBaseline * 0.2;
}

@media screen and (min-width: @mobileBreakpoint) {
    html {
        font-size: 87.5%;
        font-family: "mobile";
    }
    body:after {
        content: "mobile";
    }

    :root {
        --baseline: @verticalRhythmBaseline * 0.23;
    }
}

@media screen and (min-width: @tabletBreakpoint) {
    html {
        font-size: 90%;
        font-family: "tablet";
    }
    body:after {
        content: "tablet";
    }

    :root {
        --baseline: @verticalRhythmBaseline * 0.33;
    }
}
@media screen and (min-width: @computerBreakpoint) {
    html {
        font-size: 85%;
        font-family: "computer";
    }
    body:after {
        content: "computer";
    }

    :root {
        --baseline: @verticalRhythmBaseline * 0.35;
    }
}
@media screen and (min-width: @largeMonitorBreakpoint) {
    html {
        font-size: 90%;
        font-family: "large";
    }
    body:after {
        content: "large";
    }

    :root {
        --baseline: @verticalRhythmBaseline * 0.4;
    }
}
@media screen and (min-width: @widescreenMonitorBreakpoint) {
    html {
        font-size: 95%;
        font-family: "widescreen";
    }
    body:after {
        content: "widescreen";
    }

    :root {
        --baseline: (@verticalRhythmBaseline * 0.5);
    }
}


// Global backgrounds
// ---------------------------------------------------------------------

// General classes to apply a background color directly to an element
// @todo: This should actually be primary-background for background colors, so primary-color can be used for text color.
.primary-color {
    background-color: @lightPrimaryColor !important;

    &.inverted {
        background-color: @primaryColor !important;
        color: @white !important;
    }
}
.secondary-color {
    background-color: @lightSecondaryColor !important;

    &.inverted {
        background-color: @secondaryColor !important;
        color: @white !important;
    }
}


// Hidden elements
// ---------------------------------------------------------------------

// Make 100% sure the element displays properly on request before applying
.hidden.element {
    display: none;
}


// Main content area
// ---------------------------------------------------------------------

// Detail page on desktop
@media only screen and (min-width: @computerBreakpoint) {
    body.detail {
        #content,
        #sidebar {
            margin-top: 4rem;
        }

        // Reduce padding of the first segment, if it's white
        &:not(.non-white) #content > .white.segment:first-child,
        &:not(.non-white) #sidebar > .white.segment:first-child {
            padding-top: 0;
        }

    }
}


// Links
// ---------------------------------------------------------------------

p >,
li >,
.lead,
.content,
.header.inverted,
.header.sub {
    a:not(.button):not(.image):not(.item) {
        border-bottom: 1px dotted;
        &:hover {
            border-bottom: 1px solid;
        }
    }
}
.header a:not(.inverted),
a.header:not(.inverted),
.menu:not(.tabular) a {
    border-bottom: none !important;
}

// Link styling inside inverted segments
a.inverted:not(.button):not(.boxed) {
    color: @white;
    border-bottom-color: fade(@white, 60);
    &:hover {
        border-bottom-color: @white;
    }
}


// Images & SVGs
// ---------------------------------------------------------------------

.image {
    // Isolate content images and offset from element below
    &.content + * {
        margin-top: 1.3em;
    }
}

// Fade in lazy loading images
img.lazy {
    opacity: 0;

    &:not(.initial) {
        transition: opacity 1s;
    }
    &.initial,
    &.loaded,
    &.error {
        opacity: 1;
    }
}

svg {
    fill: currentColor; // Takes the fill color of its container
}
svg.hidden {
    display: none; // This SVG is probably used as sprite
}


// Content elements
// ---------------------------------------------------------------------

.lead {
    font-size: @scaleRatio * 1em !important;
    line-height: @lineHeight !important;
    color: @mutedTextColor;

    .inverted& {
        color: @invertedMutedTextColor;
    }
}

.meta,
.help,
.muted {
    color: @lightTextColor;

    .inverted & {
        color: @invertedLightTextColor;
    }
}
.meta {
    .publication & > span {
        display: inline-block;
        margin-right: 1em;
    }
}

.quote:not(.basic) {
    position: relative;
    padding: 0 3% 0 5%;
    font-style: italic;

    &:before,
    &:after {
        position: absolute;
        z-index: 0;
        font-size: 4rem;
        font-weight: 600;
        line-height: 0;
        opacity: 0.2;
    }
    &:before {
        content: "\201C";
        top: 1rem;
        left: -1%;

    }
    &:after {
        content: "\201D";
        bottom: -0.5rem;
        right: -1%;
    }

    footer {
        color: @mutedTextColor;
        .inverted& {
            color: @invertedMutedTextColor;
        }
    }
}

.basic.quote,
blockquote:not(.quote) {
    border-left: 5px solid;
    border-color: @borderColor;
    margin: 0 0 3rem;
    padding-left: 1em;
    color: @mutedTextColor;

    .inverted& {
        color: @invertedMutedTextColor;
        border-color: @whiteBorderColor;
    }
}

// Quote size
.quote {
    font-size: @h3;
    footer { font-size: @scaleRatio * @fontSize; }

    &.mini {
        font-size: @h6;
        footer { font-size: @scaleRatio * @mini; }
    }
    &.tiny {
        font-size: @h5;
        footer { font-size: @scaleRatio * @tiny; }
    }
    &.small {
        font-size: @h4;
        footer { font-size: @scaleRatio * @small; }
    }
    &.large {
        font-size: @h2;
        footer { font-size: @scaleRatio * @large; }
    }
    &.big {
        font-size: @h1;
        footer { font-size: @scaleRatio * @big; }
    }
    &.huge {
        font-size: @h1 * @scaleRatio;
        footer { font-size: @scaleRatio * @huge; }
    }
    &.massive {
        font-size: @h1 * @scaleRatio * @scaleRatio;
        footer { font-size: @scaleRatio * @massive; }
    }
}

// Center content on request
.ui.stackable.center.when.stacked {
    @media only screen and (max-width: @largestMobileScreen) {
        text-align: center;
        .column {
            text-align: center;
        }
    }
    &.on.tablet {
        @media only screen and (max-width: @largestTabletScreen) {
            text-align: center;
            .column {
                text-align: center;
            }
        }
    }
}


// Footer
// ---------------------------------------------------------------------

#footer {
    p {
        font-size: 1rem;
    }

    .ui.horizontal.list {
        display: block;
    }
}


// Overviews
// ---------------------------------------------------------------------

.overview {
    .description + p {
        margin-top: 2rem;
    }
}


// Map components
// ---------------------------------------------------------------------

.map {
    height: 70vh; // You'll probably want to override this value per map
}


// Responsive helper classes
// ---------------------------------------------------------------------

// For more info, see https://github.com/Semantic-Org/Semantic-UI/issues/1114

/* Mobile */
@media only screen and (max-width: (@tabletBreakpoint - 1)) {
    [class*="mobile hidden"],
    [class*="tablet only"]:not(.mobile),
    [class*="computer only"]:not(.mobile),
    [class*="large screen only"]:not(.mobile),
    [class*="widescreen only"]:not(.mobile),
    [class*="or lower hidden"] {
        display: none !important;
    }
}

/* Tablet / iPad Portrait */
@media only screen and (min-width: @tabletBreakpoint) and (max-width: (@computerBreakpoint - 1)) {
    [class*="mobile only"]:not(.tablet),
    [class*="tablet hidden"],
    [class*="computer only"]:not(.tablet),
    [class*="large screen only"]:not(.tablet),
    [class*="widescreen only"]:not(.tablet),
    [class*="or lower hidden"]:not(.mobile) {
        display: none !important;
    }
}

/* Computer / Desktop / iPad Landscape */
@media only screen and (min-width: @computerBreakpoint) and (max-width: (@largeMonitorBreakpoint - 1)) {
    [class*="mobile only"]:not(.computer),
    [class*="tablet only"]:not(.computer),
    [class*="computer hidden"],
    [class*="large screen only"]:not(.computer),
    [class*="widescreen only"]:not(.computer),
    [class*="or lower hidden"]:not(.tablet):not(.mobile) {
        display: none !important;
    }
}

/* Large Monitor */
@media only screen and (min-width: @largeMonitorBreakpoint) and (max-width: (@widescreenMonitorBreakpoint - 1)) {
    [class*="mobile only"]:not([class*="large screen"]),
    [class*="tablet only"]:not([class*="large screen"]),
    [class*="computer only"]:not([class*="large screen"]),
    [class*="large screen hidden"],
    [class*="widescreen only"]:not([class*="large screen"]),
    [class*="or lower hidden"]:not(.computer):not(.tablet):not(.mobile) {
        display: none !important;
    }
}

/* Widescreen Monitor */
@media only screen and (min-width: @widescreenMonitorBreakpoint) {
    [class*="mobile only"]:not([class*="widescreen"]),
    [class*="tablet only"]:not([class*="widescreen"]),
    [class*="computer only"]:not([class*="widescreen"]),
    [class*="large screen only"]:not([class*="widescreen"]),
    [class*="widescreen hidden"],
    [class*="widescreen or lower hidden"] {
        display: none !important;
    }
}
